# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _botapi
else:
    import _botapi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _botapi.delete_SwigPyIterator

    def value(self):
        return _botapi.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _botapi.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _botapi.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _botapi.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _botapi.SwigPyIterator_equal(self, x)

    def copy(self):
        return _botapi.SwigPyIterator_copy(self)

    def next(self):
        return _botapi.SwigPyIterator_next(self)

    def __next__(self):
        return _botapi.SwigPyIterator___next__(self)

    def previous(self):
        return _botapi.SwigPyIterator_previous(self)

    def advance(self, n):
        return _botapi.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _botapi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _botapi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _botapi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _botapi.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _botapi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _botapi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _botapi:
_botapi.SwigPyIterator_swigregister(SwigPyIterator)


def CastWorldFromPointer(ptr):
    return _botapi.CastWorldFromPointer(ptr)

def CastDOWorldFromPointer(ptr):
    return _botapi.CastDOWorldFromPointer(ptr)

def CastSFWorldFromPointer(ptr):
    return _botapi.CastSFWorldFromPointer(ptr)

def CastPSWorldFromPointer(ptr):
    return _botapi.CastPSWorldFromPointer(ptr)

def CastActivatorsFromPointer(ptr):
    return _botapi.CastActivatorsFromPointer(ptr)
class ShipVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _botapi.ShipVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _botapi.ShipVec___nonzero__(self)

    def __bool__(self):
        return _botapi.ShipVec___bool__(self)

    def __len__(self):
        return _botapi.ShipVec___len__(self)

    def __getslice__(self, i, j):
        return _botapi.ShipVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _botapi.ShipVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _botapi.ShipVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _botapi.ShipVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _botapi.ShipVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _botapi.ShipVec___setitem__(self, *args)

    def pop(self):
        return _botapi.ShipVec_pop(self)

    def append(self, x):
        return _botapi.ShipVec_append(self, x)

    def empty(self):
        return _botapi.ShipVec_empty(self)

    def size(self):
        return _botapi.ShipVec_size(self)

    def swap(self, v):
        return _botapi.ShipVec_swap(self, v)

    def begin(self):
        return _botapi.ShipVec_begin(self)

    def end(self):
        return _botapi.ShipVec_end(self)

    def rbegin(self):
        return _botapi.ShipVec_rbegin(self)

    def rend(self):
        return _botapi.ShipVec_rend(self)

    def clear(self):
        return _botapi.ShipVec_clear(self)

    def get_allocator(self):
        return _botapi.ShipVec_get_allocator(self)

    def pop_back(self):
        return _botapi.ShipVec_pop_back(self)

    def erase(self, *args):
        return _botapi.ShipVec_erase(self, *args)

    def __init__(self, *args):
        _botapi.ShipVec_swiginit(self, _botapi.new_ShipVec(*args))

    def push_back(self, x):
        return _botapi.ShipVec_push_back(self, x)

    def front(self):
        return _botapi.ShipVec_front(self)

    def back(self):
        return _botapi.ShipVec_back(self)

    def assign(self, n, x):
        return _botapi.ShipVec_assign(self, n, x)

    def resize(self, *args):
        return _botapi.ShipVec_resize(self, *args)

    def insert(self, *args):
        return _botapi.ShipVec_insert(self, *args)

    def reserve(self, n):
        return _botapi.ShipVec_reserve(self, n)

    def capacity(self):
        return _botapi.ShipVec_capacity(self)
    __swig_destroy__ = _botapi.delete_ShipVec

# Register ShipVec in _botapi:
_botapi.ShipVec_swigregister(ShipVec)

class BoxVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _botapi.BoxVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _botapi.BoxVec___nonzero__(self)

    def __bool__(self):
        return _botapi.BoxVec___bool__(self)

    def __len__(self):
        return _botapi.BoxVec___len__(self)

    def __getslice__(self, i, j):
        return _botapi.BoxVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _botapi.BoxVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _botapi.BoxVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _botapi.BoxVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _botapi.BoxVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _botapi.BoxVec___setitem__(self, *args)

    def pop(self):
        return _botapi.BoxVec_pop(self)

    def append(self, x):
        return _botapi.BoxVec_append(self, x)

    def empty(self):
        return _botapi.BoxVec_empty(self)

    def size(self):
        return _botapi.BoxVec_size(self)

    def swap(self, v):
        return _botapi.BoxVec_swap(self, v)

    def begin(self):
        return _botapi.BoxVec_begin(self)

    def end(self):
        return _botapi.BoxVec_end(self)

    def rbegin(self):
        return _botapi.BoxVec_rbegin(self)

    def rend(self):
        return _botapi.BoxVec_rend(self)

    def clear(self):
        return _botapi.BoxVec_clear(self)

    def get_allocator(self):
        return _botapi.BoxVec_get_allocator(self)

    def pop_back(self):
        return _botapi.BoxVec_pop_back(self)

    def erase(self, *args):
        return _botapi.BoxVec_erase(self, *args)

    def __init__(self, *args):
        _botapi.BoxVec_swiginit(self, _botapi.new_BoxVec(*args))

    def push_back(self, x):
        return _botapi.BoxVec_push_back(self, x)

    def front(self):
        return _botapi.BoxVec_front(self)

    def back(self):
        return _botapi.BoxVec_back(self)

    def assign(self, n, x):
        return _botapi.BoxVec_assign(self, n, x)

    def resize(self, *args):
        return _botapi.BoxVec_resize(self, *args)

    def insert(self, *args):
        return _botapi.BoxVec_insert(self, *args)

    def reserve(self, n):
        return _botapi.BoxVec_reserve(self, n)

    def capacity(self):
        return _botapi.BoxVec_capacity(self)
    __swig_destroy__ = _botapi.delete_BoxVec

# Register BoxVec in _botapi:
_botapi.BoxVec_swigregister(BoxVec)

class BarrierVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _botapi.BarrierVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _botapi.BarrierVec___nonzero__(self)

    def __bool__(self):
        return _botapi.BarrierVec___bool__(self)

    def __len__(self):
        return _botapi.BarrierVec___len__(self)

    def __getslice__(self, i, j):
        return _botapi.BarrierVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _botapi.BarrierVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _botapi.BarrierVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _botapi.BarrierVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _botapi.BarrierVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _botapi.BarrierVec___setitem__(self, *args)

    def pop(self):
        return _botapi.BarrierVec_pop(self)

    def append(self, x):
        return _botapi.BarrierVec_append(self, x)

    def empty(self):
        return _botapi.BarrierVec_empty(self)

    def size(self):
        return _botapi.BarrierVec_size(self)

    def swap(self, v):
        return _botapi.BarrierVec_swap(self, v)

    def begin(self):
        return _botapi.BarrierVec_begin(self)

    def end(self):
        return _botapi.BarrierVec_end(self)

    def rbegin(self):
        return _botapi.BarrierVec_rbegin(self)

    def rend(self):
        return _botapi.BarrierVec_rend(self)

    def clear(self):
        return _botapi.BarrierVec_clear(self)

    def get_allocator(self):
        return _botapi.BarrierVec_get_allocator(self)

    def pop_back(self):
        return _botapi.BarrierVec_pop_back(self)

    def erase(self, *args):
        return _botapi.BarrierVec_erase(self, *args)

    def __init__(self, *args):
        _botapi.BarrierVec_swiginit(self, _botapi.new_BarrierVec(*args))

    def push_back(self, x):
        return _botapi.BarrierVec_push_back(self, x)

    def front(self):
        return _botapi.BarrierVec_front(self)

    def back(self):
        return _botapi.BarrierVec_back(self)

    def assign(self, n, x):
        return _botapi.BarrierVec_assign(self, n, x)

    def resize(self, *args):
        return _botapi.BarrierVec_resize(self, *args)

    def insert(self, *args):
        return _botapi.BarrierVec_insert(self, *args)

    def reserve(self, n):
        return _botapi.BarrierVec_reserve(self, n)

    def capacity(self):
        return _botapi.BarrierVec_capacity(self)
    __swig_destroy__ = _botapi.delete_BarrierVec

# Register BarrierVec in _botapi:
_botapi.BarrierVec_swigregister(BarrierVec)

class MapObjVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _botapi.MapObjVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _botapi.MapObjVec___nonzero__(self)

    def __bool__(self):
        return _botapi.MapObjVec___bool__(self)

    def __len__(self):
        return _botapi.MapObjVec___len__(self)

    def __getslice__(self, i, j):
        return _botapi.MapObjVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _botapi.MapObjVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _botapi.MapObjVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _botapi.MapObjVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _botapi.MapObjVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _botapi.MapObjVec___setitem__(self, *args)

    def pop(self):
        return _botapi.MapObjVec_pop(self)

    def append(self, x):
        return _botapi.MapObjVec_append(self, x)

    def empty(self):
        return _botapi.MapObjVec_empty(self)

    def size(self):
        return _botapi.MapObjVec_size(self)

    def swap(self, v):
        return _botapi.MapObjVec_swap(self, v)

    def begin(self):
        return _botapi.MapObjVec_begin(self)

    def end(self):
        return _botapi.MapObjVec_end(self)

    def rbegin(self):
        return _botapi.MapObjVec_rbegin(self)

    def rend(self):
        return _botapi.MapObjVec_rend(self)

    def clear(self):
        return _botapi.MapObjVec_clear(self)

    def get_allocator(self):
        return _botapi.MapObjVec_get_allocator(self)

    def pop_back(self):
        return _botapi.MapObjVec_pop_back(self)

    def erase(self, *args):
        return _botapi.MapObjVec_erase(self, *args)

    def __init__(self, *args):
        _botapi.MapObjVec_swiginit(self, _botapi.new_MapObjVec(*args))

    def push_back(self, x):
        return _botapi.MapObjVec_push_back(self, x)

    def front(self):
        return _botapi.MapObjVec_front(self)

    def back(self):
        return _botapi.MapObjVec_back(self)

    def assign(self, n, x):
        return _botapi.MapObjVec_assign(self, n, x)

    def resize(self, *args):
        return _botapi.MapObjVec_resize(self, *args)

    def insert(self, *args):
        return _botapi.MapObjVec_insert(self, *args)

    def reserve(self, n):
        return _botapi.MapObjVec_reserve(self, n)

    def capacity(self):
        return _botapi.MapObjVec_capacity(self)
    __swig_destroy__ = _botapi.delete_MapObjVec

# Register MapObjVec in _botapi:
_botapi.MapObjVec_swigregister(MapObjVec)

class StrVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _botapi.StrVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _botapi.StrVec___nonzero__(self)

    def __bool__(self):
        return _botapi.StrVec___bool__(self)

    def __len__(self):
        return _botapi.StrVec___len__(self)

    def __getslice__(self, i, j):
        return _botapi.StrVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _botapi.StrVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _botapi.StrVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _botapi.StrVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _botapi.StrVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _botapi.StrVec___setitem__(self, *args)

    def pop(self):
        return _botapi.StrVec_pop(self)

    def append(self, x):
        return _botapi.StrVec_append(self, x)

    def empty(self):
        return _botapi.StrVec_empty(self)

    def size(self):
        return _botapi.StrVec_size(self)

    def swap(self, v):
        return _botapi.StrVec_swap(self, v)

    def begin(self):
        return _botapi.StrVec_begin(self)

    def end(self):
        return _botapi.StrVec_end(self)

    def rbegin(self):
        return _botapi.StrVec_rbegin(self)

    def rend(self):
        return _botapi.StrVec_rend(self)

    def clear(self):
        return _botapi.StrVec_clear(self)

    def get_allocator(self):
        return _botapi.StrVec_get_allocator(self)

    def pop_back(self):
        return _botapi.StrVec_pop_back(self)

    def erase(self, *args):
        return _botapi.StrVec_erase(self, *args)

    def __init__(self, *args):
        _botapi.StrVec_swiginit(self, _botapi.new_StrVec(*args))

    def push_back(self, x):
        return _botapi.StrVec_push_back(self, x)

    def front(self):
        return _botapi.StrVec_front(self)

    def back(self):
        return _botapi.StrVec_back(self)

    def assign(self, n, x):
        return _botapi.StrVec_assign(self, n, x)

    def resize(self, *args):
        return _botapi.StrVec_resize(self, *args)

    def insert(self, *args):
        return _botapi.StrVec_insert(self, *args)

    def reserve(self, n):
        return _botapi.StrVec_reserve(self, n)

    def capacity(self):
        return _botapi.StrVec_capacity(self)
    __swig_destroy__ = _botapi.delete_StrVec

# Register StrVec in _botapi:
_botapi.StrVec_swigregister(StrVec)

class IActivators(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _botapi.delete_IActivators

    def allocateConsoleWindow(self):
        return _botapi.IActivators_allocateConsoleWindow(self)

    def moveTo(self, *args):
        return _botapi.IActivators_moveTo(self, *args)

    def selectShip(self, s):
        return _botapi.IActivators_selectShip(self, s)

    def attackShip(self, s):
        return _botapi.IActivators_attackShip(self, s)

    def reviveHero(self):
        return _botapi.IActivators_reviveHero(self)

    def startRepair(self):
        return _botapi.IActivators_startRepair(self)

    def stopRepair(self):
        return _botapi.IActivators_stopRepair(self)

    def sendKeys(self, keys):
        return _botapi.IActivators_sendKeys(self, keys)

    def collectBox(self, box):
        return _botapi.IActivators_collectBox(self, box)

    def sendNotification(self, args):
        return _botapi.IActivators_sendNotification(self, args)

    def leaveHarbour(self):
        return _botapi.IActivators_leaveHarbour(self)

    def doAction(self, arg):
        return _botapi.IActivators_doAction(self, arg)

    def uncloakShip(self, s):
        return _botapi.IActivators_uncloakShip(self, s)

# Register IActivators in _botapi:
_botapi.IActivators_swigregister(IActivators)

class WorldData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _botapi.delete_WorldData

    def __init__(self, *args):
        _botapi.WorldData_swiginit(self, _botapi.new_WorldData(*args))
    map = property(_botapi.WorldData_map_get, _botapi.WorldData_map_set)
    hero = property(_botapi.WorldData_hero_get, _botapi.WorldData_hero_set)
    ships = property(_botapi.WorldData_ships_get, _botapi.WorldData_ships_set)
    boxes = property(_botapi.WorldData_boxes_get, _botapi.WorldData_boxes_set)
    clanBases = property(_botapi.WorldData_clanBases_get, _botapi.WorldData_clanBases_set)

# Register WorldData in _botapi:
_botapi.WorldData_swigregister(WorldData)

class Pet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    active = property(_botapi.Pet_active_get, _botapi.Pet_active_set)
    hp = property(_botapi.Pet_hp_get, _botapi.Pet_hp_set)

    def __init__(self):
        _botapi.Pet_swiginit(self, _botapi.new_Pet())
    __swig_destroy__ = _botapi.delete_Pet

# Register Pet in _botapi:
_botapi.Pet_swigregister(Pet)

class DOWorldData(WorldData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _botapi.DOWorldData_swiginit(self, _botapi.new_DOWorldData())
    __swig_destroy__ = _botapi.delete_DOWorldData
    inNaz = property(_botapi.DOWorldData_inNaz_get, _botapi.DOWorldData_inNaz_set)
    pet = property(_botapi.DOWorldData_pet_get, _botapi.DOWorldData_pet_set)
    cargo = property(_botapi.DOWorldData_cargo_get, _botapi.DOWorldData_cargo_set)
    portals = property(_botapi.DOWorldData_portals_get, _botapi.DOWorldData_portals_set)
    barriers = property(_botapi.DOWorldData_barriers_get, _botapi.DOWorldData_barriers_set)
    ores = property(_botapi.DOWorldData_ores_get, _botapi.DOWorldData_ores_set)

# Register DOWorldData in _botapi:
_botapi.DOWorldData_swigregister(DOWorldData)

class SFWorldData(WorldData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _botapi.SFWorldData_swiginit(self, _botapi.new_SFWorldData())
    __swig_destroy__ = _botapi.delete_SFWorldData

# Register SFWorldData in _botapi:
_botapi.SFWorldData_swigregister(SFWorldData)

class PSWorldData(WorldData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _botapi.PSWorldData_swiginit(self, _botapi.new_PSWorldData())
    __swig_destroy__ = _botapi.delete_PSWorldData

# Register PSWorldData in _botapi:
_botapi.PSWorldData_swigregister(PSWorldData)

class IntPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_botapi.IntPoint_x_get, _botapi.IntPoint_x_set)
    y = property(_botapi.IntPoint_y_get, _botapi.IntPoint_y_set)

    def __init__(self):
        _botapi.IntPoint_swiginit(self, _botapi.new_IntPoint())
    __swig_destroy__ = _botapi.delete_IntPoint

# Register IntPoint in _botapi:
_botapi.IntPoint_swigregister(IntPoint)

class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_botapi.Point_x_get, _botapi.Point_x_set)
    y = property(_botapi.Point_y_get, _botapi.Point_y_set)

    def calcDistance(self, p):
        return _botapi.Point_calcDistance(self, p)

    def calcDistanceNoSqrt(self, p):
        return _botapi.Point_calcDistanceNoSqrt(self, p)

    def __init__(self, *args):
        _botapi.Point_swiginit(self, _botapi.new_Point(*args))
    __swig_destroy__ = _botapi.delete_Point

    def __nonzero__(self):
        return _botapi.Point___nonzero__(self)
    __bool__ = __nonzero__



    def intPoint(self):
        return _botapi.Point_intPoint(self)

    def toString(self):
        return _botapi.Point_toString(self)

# Register Point in _botapi:
_botapi.Point_swigregister(Point)

class MapObject(Point):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _botapi.MapObject_swiginit(self, _botapi.new_MapObject(*args))
    __swig_destroy__ = _botapi.delete_MapObject

    def __nonzero__(self):
        return _botapi.MapObject___nonzero__(self)
    __bool__ = __nonzero__


    id = property(_botapi.MapObject_id_get, _botapi.MapObject_id_set)
    prefix = property(_botapi.MapObject_prefix_get, _botapi.MapObject_prefix_set)
    uid = property(_botapi.MapObject_uid_get, _botapi.MapObject_uid_set)

# Register MapObject in _botapi:
_botapi.MapObject_swigregister(MapObject)

class Depletable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    curr = property(_botapi.Depletable_curr_get, _botapi.Depletable_curr_set)
    max = property(_botapi.Depletable_max_get, _botapi.Depletable_max_set)

    def getPercentage(self):
        return _botapi.Depletable_getPercentage(self)

    def __init__(self):
        _botapi.Depletable_swiginit(self, _botapi.new_Depletable())
    __swig_destroy__ = _botapi.delete_Depletable

# Register Depletable in _botapi:
_botapi.Depletable_swigregister(Depletable)

class Ship(MapObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _botapi.Ship_swiginit(self, _botapi.new_Ship(*args))
    __swig_destroy__ = _botapi.delete_Ship

    def serialize(self):
        return _botapi.Ship_serialize(self)

    @staticmethod
    def deserialize(msg):
        return _botapi.Ship_deserialize(msg)
    isNpc = property(_botapi.Ship_isNpc_get, _botapi.Ship_isNpc_set)
    isEnemy = property(_botapi.Ship_isEnemy_get, _botapi.Ship_isEnemy_set)
    hp = property(_botapi.Ship_hp_get, _botapi.Ship_hp_set)
    shield = property(_botapi.Ship_shield_get, _botapi.Ship_shield_set)
    cloaked = property(_botapi.Ship_cloaked_get, _botapi.Ship_cloaked_set)
    factionId = property(_botapi.Ship_factionId_get, _botapi.Ship_factionId_set)
    dest = property(_botapi.Ship_dest_get, _botapi.Ship_dest_set)
    name = property(_botapi.Ship_name_get, _botapi.Ship_name_set)
    clan = property(_botapi.Ship_clan_get, _botapi.Ship_clan_set)
    moving = property(_botapi.Ship_moving_get, _botapi.Ship_moving_set)
    target = property(_botapi.Ship_target_get, _botapi.Ship_target_set)

    def toString(self):
        return _botapi.Ship_toString(self)

# Register Ship in _botapi:
_botapi.Ship_swigregister(Ship)

def Ship_deserialize(msg):
    return _botapi.Ship_deserialize(msg)

class Box(MapObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NORMAL = _botapi.Box_NORMAL
    TREASURE = _botapi.Box_TREASURE
    ORE = _botapi.Box_ORE
    CARGO = _botapi.Box_CARGO
    category = property(_botapi.Box_category_get, _botapi.Box_category_set)

    def __init__(self, *args):
        _botapi.Box_swiginit(self, _botapi.new_Box(*args))
    type = property(_botapi.Box_type_get, _botapi.Box_type_set)
    __swig_destroy__ = _botapi.delete_Box

# Register Box in _botapi:
_botapi.Box_swigregister(Box)

class Map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_botapi.Map_id_get, _botapi.Map_id_set)
    width = property(_botapi.Map_width_get, _botapi.Map_width_set)
    height = property(_botapi.Map_height_get, _botapi.Map_height_set)
    name = property(_botapi.Map_name_get, _botapi.Map_name_set)

    def __init__(self):
        _botapi.Map_swiginit(self, _botapi.new_Map())
    __swig_destroy__ = _botapi.delete_Map

# Register Map in _botapi:
_botapi.Map_swigregister(Map)

class Wallet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vipCurr = property(_botapi.Wallet_vipCurr_get, _botapi.Wallet_vipCurr_set)
    defCurr = property(_botapi.Wallet_defCurr_get, _botapi.Wallet_defCurr_set)

    def __init__(self):
        _botapi.Wallet_swiginit(self, _botapi.new_Wallet())
    __swig_destroy__ = _botapi.delete_Wallet

# Register Wallet in _botapi:
_botapi.Wallet_swigregister(Wallet)

class Hero(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wallet = property(_botapi.Hero_wallet_get, _botapi.Hero_wallet_set)
    ship = property(_botapi.Hero_ship_get, _botapi.Hero_ship_set)
    selectedTarget = property(_botapi.Hero_selectedTarget_get, _botapi.Hero_selectedTarget_set)
    isDead = property(_botapi.Hero_isDead_get, _botapi.Hero_isDead_set)

    def __init__(self):
        _botapi.Hero_swiginit(self, _botapi.new_Hero())
    __swig_destroy__ = _botapi.delete_Hero

# Register Hero in _botapi:
_botapi.Hero_swigregister(Hero)

class Barrier(MapObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _botapi.Barrier_swiginit(self, _botapi.new_Barrier(*args))
    width = property(_botapi.Barrier_width_get, _botapi.Barrier_width_set)
    height = property(_botapi.Barrier_height_get, _botapi.Barrier_height_set)
    type = property(_botapi.Barrier_type_get, _botapi.Barrier_type_set)
    __swig_destroy__ = _botapi.delete_Barrier

# Register Barrier in _botapi:
_botapi.Barrier_swigregister(Barrier)

EventType_tick = _botapi.EventType_tick
EventType_death = _botapi.EventType_death
EventType_heroEntered = _botapi.EventType_heroEntered
EventType_heroTarget = _botapi.EventType_heroTarget
EventType_shipsList = _botapi.EventType_shipsList
EventType_boxesList = _botapi.EventType_boxesList
EventType_heroShip = _botapi.EventType_heroShip
EventType_map = _botapi.EventType_map
EventType_wallet = _botapi.EventType_wallet
EventType_heroStartsMoving = _botapi.EventType_heroStartsMoving
EventType_heroStopsMoving = _botapi.EventType_heroStopsMoving
EventType_EventType_END = _botapi.EventType_EventType_END
class Event(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _botapi.Event_swiginit(self, _botapi.new_Event(*args))
    type = property(_botapi.Event_type_get)
    success = property(_botapi.Event_success_get)
    __swig_destroy__ = _botapi.delete_Event

# Register Event in _botapi:
_botapi.Event_swigregister(Event)


def EventTypeToString(et):
    return _botapi.EventTypeToString(et)

def GetShipByUid(ships, uid):
    return _botapi.GetShipByUid(ships, uid)
class IShipFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isOk(self, obj):
        return _botapi.IShipFilter_isOk(self, obj)
    __swig_destroy__ = _botapi.delete_IShipFilter

    def __init__(self):
        if self.__class__ == IShipFilter:
            _self = None
        else:
            _self = self
        _botapi.IShipFilter_swiginit(self, _botapi.new_IShipFilter(_self, ))
    def __disown__(self):
        self.this.disown()
        _botapi.disown_IShipFilter(self)
        return weakref.proxy(self)

# Register IShipFilter in _botapi:
_botapi.IShipFilter_swigregister(IShipFilter)

class IBoxFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isOk(self, obj):
        return _botapi.IBoxFilter_isOk(self, obj)
    __swig_destroy__ = _botapi.delete_IBoxFilter

    def __init__(self):
        if self.__class__ == IBoxFilter:
            _self = None
        else:
            _self = self
        _botapi.IBoxFilter_swiginit(self, _botapi.new_IBoxFilter(_self, ))
    def __disown__(self):
        self.this.disown()
        _botapi.disown_IBoxFilter(self)
        return weakref.proxy(self)

# Register IBoxFilter in _botapi:
_botapi.IBoxFilter_swigregister(IBoxFilter)


def GetClosestShip(*args):
    return _botapi.GetClosestShip(*args)

def GetClosestBox(*args):
    return _botapi.GetClosestBox(*args)


